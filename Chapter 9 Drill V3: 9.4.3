
//////////////////////////////////////////////////////////////////////////////version 9.4.3//////////////////////////////////////////////////////////////////

#include "std_lib_facilities.h"

class Date
{
    int y, m, d;
public:
    Date(int y, int m, int d);      // check for valid date and initializes it
    void add_day(int n);            // this is the declaration for the function add_day(int n) that increase the days by n
    int month() const               // declaration of the month and it should be constant after it is declared so that it can be displayed as a same number
    {
        return m;
    }
    int day() const
    {
        return d;
    }
    int year() const
    {
        return y;
    }
};
Date::Date(int yy, int mm, int dd)
    :y{yy}, m{mm}, d{dd}
{
    if (m < 1 || 12 < m) error("invalid month");
    if (d < 1 || 31 < d) error("impossible day");
}
    void Date::add_day(int n)
{
	d += n;
	if (d > 31)
	{
        d %= 31; // when d is greater than 31 for example if its 32, it will be 32%31 to give the answer of 1 to not exceed the limit
		m++;
		if (m > 12)
		{
			y++;
			m -= 12;
		}
	}
}

ostream& operator<<(ostream& os, const Date& d)  // layout of the code that will print out yyyy.mm.dd
{
    return os << d.year()
           << '.' << d.month()
           << '.' << d.day();
}
int main()
try
{
    Date today(1978,6,25); // Date::Date(int y, int m, int d)
    cout << "Today: " << today << endl;
    Date tomorrow = today;
    tomorrow.add_day(1);
    cout << "Tomorrow: " << tomorrow << endl;
    Date new_year_eve(2021,12,31);
    cout << "New year's Eve : " << new_year_eve << endl;
    Date new_year = new_year_eve;
    new_year.add_day(1);
    cout << "New year: " << new_year << endl;
    Date invalid_day(2004, 13, -5);
}
catch(exception& e)
{
    cerr << e.what() << '\n';  // this catch function will print the error messages above as an exeption function so that the code would still run even though if it has errors
    return 1;
}
catch(...)
{
    cerr << "unknown error" << '\n';
    return 2;
}
