/*
//Version 9.4.1
#include "std_lib_facilities.h"

struct Date {
	int y, m, d; // struct Date is a user defined data type which combines different data types under one single name. So the data object will simply print 3 ints: Year, Month and date in order
};

void init_date(Date& date, int y, int m, int d)
{
	if (y > 0)
		date.y = y;
	else
		error("Invalid year");
	if (m < 12 && m > 0)
		date.m = m;
	else
		error("Invalid month");
	if (d > 0 && d < 32)
		date.d = d;
	else
		error("Invalid day");
}

void add_day(Date& date, int n) //Pass by reference which will assign the date a new value after the function is called
{
	date.d += n;
	if (date.d > 31)
	{
		date.m++;
		date.d -= 31;
		if (date.m > 12)
		{
			date.y++;
			date.m -= 12;
		}
	}
}

int main()
{
	Date today;

	init_date(today, 1978, 6, 25);

	cout << "Date: " << today.y << ". " << today.m << ". " << today.d << endl;

	Date tomorrow = today;
	add_day(tomorrow,1);
	cout << "Today: " << today.y << ". " << today.m << ". " << today.d << endl << "Tomorrow: " << tomorrow.y << ". " << tomorrow.m << ". " << tomorrow.d << endl;

    //Date invalid_day;
    //init_date(invalid_day, 2004, 13, -5); // The code will print out invalid month as the month exceeds the limit of 12 months and -5 is not in the day range of 1 to 31


	return 0;
}
//Version 9.4.2
#include "std_lib_facilities.h"

struct Date {
	int year, month, day;
	Date(int y, int m, int d); //the date has to be written in YYYY.MM.DD exactly, it will give an error if the order changes
	void add_day(int n); // DECLARATION for the function add_day() to update the date when we add days
};

Date::Date(int y, int m, int d)
{
	if (y > 0)
		year = y;
	else
		error("Invalid year");
	if (m < 13 && m > 0)
		month = m;
	else
		error("Invalid month");
	if (d > 0 && d < 32)
		day = d;
	else
		error("Invalid day");
}

void Date::add_day(int n)
{
	day += n;
	if (day > 31)
	{
		month++;
		day -= 31;
		if (month > 12)
		{
			year++;
			month -= 12;
		}
	}
}

int main()
try {


	//Date some_day {12, 24, 2018}; //Runtime error


    Date today {1978, 6, 25};

    cout << "Date: " << today.year << ". " << today.month << ". " << today.day << endl;

    Date tomorrow = today;
    tomorrow.add_day(1);

    cout << "Tomorrow: " << tomorrow.year << ". " << tomorrow.month << ". " << tomorrow.day << endl;

    Date birth_date {2002, 12, 31};
    birth_date.month++; //birthdate.day++; In this case, the value will be incremented to 13 for month and 32 for day but no error would occur because we didnt use the function add_day()
    cout << "Birthdate: " << birth_date.year << ". " << birth_date.month << ". " << birth_date.day << endl;

    Date invalid_day {2004, 11, 34};

	return 0;

} catch (exception& e) {
	cout << "Error: " << e.what() << endl; // catch function is used to find the error in the code and print an error message instead of giving an actual error and preventing the code from compiling
	return 1;
}


//version 9.4.3

#include "std_lib_facilities.h"

class Date
{
    int y, m, d;
public:
    Date(int y, int m, int d);      // check for valid date and initializes it
    void add_day(int n);            // this is the declaration for the function add_day(int n) that increase the days by n
    int month() const               // declaration of the month and it should be constant after it is declared so that it can be displayed as a same number
    {
        return m;
    }
    int day() const
    {
        return d;
    }
    int year() const
    {
        return y;
    }
};
Date::Date(int yy, int mm, int dd)
    :y{yy}, m{mm}, d{dd}
{
    if (m < 1 || 12 < m) error("invalid month");
    if (d < 1 || 31 < d) error("impossible day");
}
    void Date::add_day(int n)
{
	d += n;
	if (d > 31)
	{
        d %= 31; // when d is greater than 31 for example if its 32, it will be 32%31 to give the answer of 1 to not exceed the limit
		m++;
		if (m > 12)
		{
			y++;
			m -= 12;
		}
	}
}

ostream& operator<<(ostream& os, const Date& d)  // layout of the code that will print out yyyy.mm.dd
{
    return os << d.year()
           << '.' << d.month()
           << '.' << d.day();
}
int main()
try
{
    Date today(1978,6,25); // Date::Date(int y, int m, int d)
    cout << "Today: " << today << endl;
    Date tomorrow = today;
    tomorrow.add_day(1);
    cout << "Tomorrow: " << tomorrow << endl;
    Date new_year_eve(2021,12,31);
    cout << "New year's Eve : " << new_year_eve << endl;
    Date new_year = new_year_eve;
    new_year.add_day(1);
    cout << "New year: " << new_year << endl;
    Date invalid_day(2004, 13, -5);
}
catch(exception& e)
{
    cerr << e.what() << '\n';  // this catch function will print the error messages above as an exeption function so that the code would still run even though if it has errors
    return 1;
}
catch(...)
{
    cerr << "unknown error" << '\n';
    return 2;
}

//Version 9.7.1

#include "std_lib_facilities.h"
enum class Month {
    jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec  // enumeration class is basically a user defined class that includes a limited number of constants which means for the year it has only 12 months and only the mentioned months, we cannot have a month for example called joe as it doesnt exist
};

vector<string> month_tbl = { "January", "February", "March", "April",
                             "May", "June", "July", "August", "September",
                             "October", "November", "December" }; //vector that stores the months of the year in order (table so the first element is 1 which is january)

ostream& operator<<(ostream& os, Month m)
{
    return os << month_tbl[int(m)]; // displays the month when declared. for ex when we write jan, it will print January
}

class Date {
    int y;
    Month m; // the format is yyyy.mm.dd with m as a string
    int d;
public:
    Date(int y, Month m, int d);
    void add_day(int n);
    int year() const { return y; }
    Month month() const { return m; }
    int day() const { return d; }
};


Date::Date(int yy, Month mm, int dd)
    :y{yy}, m{mm}, d{dd}
{
    if (d < 1 || 31 < d) error("impossible day");
}
   Month operator++(Month& m)
{
	m = (m==Month::dec) ? Month::jan : Month(int(m)+1); //This operator will increase the month by one when we ++m
	return m;
}
void Date::add_day(int n)
{
    d += n;
    if (d > 31)
    {
        d %= 31;
        ++m;
    }
        if (m==Month::jan) //if the month is jan, this means that the year is new so we add y by one as it will be a new year
            y++;
}


ostream& operator<<(ostream& os, const Date& d)
{
    return os << d.year()
              << '.' << d.month()
              << '.' << d.day();
}

int main()
try {
    Date today(1978, Month::jun, 25);
    Date tomorrow = today;
    tomorrow.add_day(1);

    cout << "Today : " << today << '\n'
         << "Tomorrow: " << tomorrow << '\n';

    Date new_year_eve(2021, Month::dec, 31);
    Date new_year = new_year_eve;
    new_year.add_day(1);
    cout << "New year's Eve: " << new_year_eve << endl << "New Year: " << new_year << endl;


    //Date bad_day(2004, Month::jul, -5);
}
catch(exception& e) {
    cerr << e.what() << '\n';
    return 1;
}
catch(...) {
    cerr << "unknown error" << '\n';
    return 2;
}
*/
// Version 9.7.4
#include "std_lib_facilities.h"
enum class Month {
    jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec  // enumeration class is basically a user defined class that includes a limited number of constants which means for the year it has only 12 months and only the mentioned months, we cannot have a month for example called joe as it doesnt exist
};

vector<string> month_tbl = { "January", "February", "March", "April",
                             "May", "June", "July", "August", "September",
                             "October", "November", "December" }; //vector that stores the months of the year in order (table so the first element is 1 which is january)

ostream& operator<<(ostream& os, Month m)
{
    return os << month_tbl[int(m)]; // displays the month when declared. for ex when we write jan, it will print January
}

class Date {
public:
    Date(int y, Month m, int d);
    void add_day(int n);
    void add_month(int n);
    void add_year(int n);
    int year() const { return y; }
    Month month() const { return m; }
    int day() const { return d; }

private:
    int y, d;
	Month m;
};


Date::Date(int yy, Month mm, int dd)
    :y{yy}, m{mm}, d{dd}
{
    if (d < 1 || 31 < d) error("impossible day");
}
   Month operator++(Month& m)
{
	m = (m==Month::dec) ? Month::jan : Month(int(m)+1); //This operator will increase the month by one when we ++m
	return m;
}
void Date::add_day(int n)
{
    d += n;
    if (d > 31)
    {
        d %= 31;
        ++m;
    }
        if (m==Month::jan) //if the month is jan, this means that the year is new so we add y by one as it will be a new year
            y++;
}
void Date::add_month(int n) 
{
	int nextM = 0;
	if ((nextM = int(m) + n) > 12)  //int(m) indicates number of month, so if int(1) then this is january, if nextM = 12+1 = 13, then we return the month to jan and increase the year by 1
	{
		m = Month::jan;
		y++;
	}
	else
		m = Month(nextM);
}
void Date::add_year(int n) // function to add year
{
	y += n;

}

ostream& operator<<(ostream& os, const Date& d) //displays the layout
{
    return os << d.year()
              << '.' << d.month()
              << '.' << d.day();
}

int main()
try {
    Date today(1978, Month::jun, 25);
    Date tomorrow = today;
    tomorrow.add_day(1);

    cout << "Today : " << today << '\n'
         << "Tomorrow: " << tomorrow << '\n';


    Date next_month = today;
    next_month.add_month(1);
    cout << "Next month: " << next_month << '\n' << endl;

    Date next_year = today;
    next_year.add_year(10);
    cout << "Next 10 years: " << next_year << '\n' << endl;

    Date new_year_eve(2021, Month::dec, 31);
    Date new_year = new_year_eve;
    new_year.add_day(1);
    cout << "New year's Eve: " << new_year_eve << endl << "New Year: " << new_year << endl;


    //Date bad_day(2004, Month::jul, -5);
}
catch(exception& e) {
    cerr << e.what() << '\n';
    return 1;
}
catch(...) {
    cerr << "unknown error" << '\n';
    return 2;
}
